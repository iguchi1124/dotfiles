#!/bin/bash

PROGNAME=$(basename $0)

usage() {
    echo "Usage: $PROGNAME arn [options]"
    echo
    echo "Options:"
    echo "  -h, --help"
    echo "  -d, [--duration-seconds duration] # Expiry duration in seconds"
    echo "  -t, [--token-code token] # MFA token code"
    echo
    exit 1
}

for opt in "$@"
do
    case "$opt" in
        '-h'|'--help' )
            usage
            exit 1
            ;;
        '-d'|'--duration-seconds' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROGNAME: option requires an argument -- $1" 1>&2
                exit 1
            fi
            duration_seconds="$2"
            shift 2
            ;;
        '-t'|'--token-code' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROGNAME: option requires an argument -- $1" 1>&2
                exit 1
            fi
            token_code="$2"
            shift 2
            ;;
        -*)
            echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
            exit 1
            ;;
        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
                arn="$1"
                shift 1
            fi
            ;;
    esac
done

if [ -z "$arn" ]; then
    usage
fi

cmd="aws sts assume-role --role-arn $arn --role-session-name $USER-$(date +%Y%m%d%H%M%S)"

if [ -n "$duration_seconds" ]; then
    cmd+=" --duration-seconds $duration_seconds"
fi

if [ -n "$token_code" ]; then
    cmd+=" --token-code $token_code"
fi

json=$(eval $cmd)

export AWS_ACCESS_KEY_ID=$(echo $json | jq -M -r .Credentials.AccessKeyId)
export AWS_SECRET_ACCESS_KEY=$(echo $json | jq -M -r .Credentials.SecretAccessKey)
export AWS_SESSION_TOKEN=$(echo $json | jq -M -r .Credentials.SessionToken)

exec $SHELL
